//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "ClientView.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string ClientView::genText(const DrTemplateData& ClientView_view_data)
{
	drogon::OStringStream ClientView_tmp_stream;
	std::string layoutName{""};
	ClientView_tmp_stream << "<!DOCTYPE html>\n";
	ClientView_tmp_stream << "<html>\n";
	ClientView_tmp_stream << "<head>\n";
	ClientView_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	ClientView_tmp_stream << "    <title>Portex Client Demo</title>\n";
	ClientView_tmp_stream << "    <script type=\"text/javascript\">\n";
	ClientView_tmp_stream << "        // Encrypt function, sends id and the message to url=/encrypt?id=ID&message=MESSAGE\n";
	ClientView_tmp_stream << "        function encrypt() {\n";
	ClientView_tmp_stream << "            var id = document.getElementById(\"id\").value;\n";
	ClientView_tmp_stream << "            var message = document.getElementById(\"message\").value;\n";
	ClientView_tmp_stream << "            var url = \"/encrypt?id=\" + id + \"&message=\" + message;\n";
	ClientView_tmp_stream << "            var xhr = new XMLHttpRequest();\n";
	ClientView_tmp_stream << "            xhr.open(\"GET\", url, true);\n";
	ClientView_tmp_stream << "            xhr.onreadystatechange = function() {\n";
	ClientView_tmp_stream << "                if (xhr.readyState == 4) {\n";
	ClientView_tmp_stream << "                    // Print the encrypted message\n";
	ClientView_tmp_stream << "                    alert(xhr.responseText);\n";
	ClientView_tmp_stream << "                }\n";
	ClientView_tmp_stream << "            }\n";
	ClientView_tmp_stream << "            xhr.send();\n";
	ClientView_tmp_stream << "        }\n";
	ClientView_tmp_stream << "    </script>\n";
	ClientView_tmp_stream << "</head>\n";
	ClientView_tmp_stream << "<body>\n";
	ClientView_tmp_stream << "<progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width: 300px;\"></progress>\n";
	ClientView_tmp_stream << "<span id=\"percentage\"></span><span id=\"time\"></span>\n";
	ClientView_tmp_stream << "<br /><br />\n";
	ClientView_tmp_stream << "<input type=\"text\" id=\"id\" placeholder=\"ID\" />\n";
	ClientView_tmp_stream << "<input type=\"text\" id=\"message\" placeholder=\"Message\" />\n";
	ClientView_tmp_stream << "<button onclick=\"encrypt()\">Encrypt</button>\n";
	ClientView_tmp_stream << "</body>\n";
	ClientView_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(ClientView_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = ClientView_view_data;
auto str = std::move(ClientView_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
